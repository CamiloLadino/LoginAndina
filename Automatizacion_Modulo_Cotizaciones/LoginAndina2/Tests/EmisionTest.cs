using LoginAndina2.Models;
using LoginAndina2.Object;

namespace LoginAndina2
{
    [TestFixture]
    public class EmisionTest
    {
        private DriverChrome chromeDriver;
        private EmisionModel emisionPage;
        private LoginPage loginPage;

        [SetUp]
        public void Setup()
        {
            chromeDriver = new DriverChrome();
            chromeDriver.SetUp();
            loginPage = new LoginPage(chromeDriver.Driver);
            emisionPage = new EmisionModel(chromeDriver.Driver);
        }

        [Test]
        public async Task TestEmisionPolizaIndividual()
        {
            try
            {
                Console.WriteLine("üöÄ Iniciando test de emisi√≥n de p√≥liza individual...");

                // Login secuencial
                Console.WriteLine("üîë Ejecutando login...");
                await loginPage.LoginSequentialAsync();
                Console.WriteLine("‚úÖ Login completado exitosamente");

                // Navegar al men√∫ de emisi√≥n
                Console.WriteLine("üìã Navegando al men√∫ de emisi√≥n...");
                emisionPage.EmisionPol();

                // // Emitir p√≥liza individual con reintentos
                // Console.WriteLine("üìÑ Emitiendo p√≥liza individual...");
                // emisionPage.EmisionPolOneConReintento();

                Console.WriteLine("üéâ Test completado exitosamente!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test fall√≥: {ex.Message}");
                Console.WriteLine($"üìã Stack trace: {ex.StackTrace}");
                throw;
            }
        }

        // [Test]
        // public async Task TestEmisionPolizaMultiple()
        // {
        //     try
        //     {
        //         Console.WriteLine("üöÄ Iniciando test de emisi√≥n de m√∫ltiples p√≥lizas...");

        //         // Login secuencial
        //         await loginPage.LoginSequentialAsync();

        //         // Navegar al men√∫ de emisi√≥n
        //         emisionPage.EmisionPol();

        //         // Emitir m√∫ltiples p√≥lizas
        //         emisionPage.EmisionPolMas();

        //         Console.WriteLine("üéâ Test de m√∫ltiples p√≥lizas completado exitosamente!");
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine($"‚ùå Test fall√≥: {ex.Message}");
        //         throw;
        //     }
        // }

        // [Test]
        // [TestCase("COT-00002026")]
        // [TestCase("COT-00002027")]
        // [TestCase("COT-00002028")]
        // public async Task TestEmisionPolizaParametrizada(string numeroCotizacion)
        // {
        //     try
        //     {
        //         Console.WriteLine($"üöÄ Iniciando test para cotizaci√≥n: {numeroCotizacion}");

        //         await loginPage.LoginSequentialAsync();
        //         emisionPage.EmisionPol();
        //         emisionPage.EmisionPolOne(numeroCotizacion);

        //         Console.WriteLine($"üéâ Test completado para cotizaci√≥n: {numeroCotizacion}");
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine($"‚ùå Test fall√≥ para cotizaci√≥n {numeroCotizacion}: {ex.Message}");
        //         throw;
        //     }
        // }

        // [TearDown]
        // public void TearDown()
        // {
        //     try
        //     {
        //         chromeDriver?.TearDown();
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine($"‚ùå Error durante el TearDown: {ex.Message}");
        //     }
        // }
    }
}